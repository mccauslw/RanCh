dimnames(PC_counts)
mydimnames = dimnames(PC_counts)
mydimnames
names(mydimnames) = c('Domain', 'Subset', 'Object')
mydimnames
source('~/Dropbox/_R/RanCh/data-raw/popn_generate_data.R')
source('~/Dropbox/_R/RanCh/data-raw/popn_generate_data.R')
devtools::load_all(".")
PC_counts
source('~/Dropbox/_R/RanCh/data-raw/popn_generate_data.R')
devtools::load_all(".")
source('~/Dropbox/_R/RanCh/data-raw/universe.R')
PC_counts
library(RanCh)
PC_counts
source('~/Dropbox/_R/RanCh/data-raw/popn_generate_data.R')
subset_card>1
(1:n_subsets)[subset_card>1]
n_subsets
(1:n_subsets)[subset_card[1:n_subsets>1]
)
(1:n_subsets)[subset_card[1:n_subsets>1]]
(1:n_subsets)[subset_card[1:n_subsets]>1]
source('~/Dropbox/_R/RanCh/data-raw/popn_generate_data.R')
PC_counts$subset_card == PC_counts$choice_int
names(PC_count)
names(PC_table)
source('~/Dropbox/_R/RanCh/data-raw/popn_generate_data.R')
PC_counts['Beer',]
PC_counts['Beer',,]
PC_counts$Subset == PC_counts$Object
outer(1:7, 1:3, fun=function(x, y) {x>y})
outer(1:7, 1:3, fun="paste")
month.abb
outer(month.abb, 1999:2003, FUN = "paste")
outer(1:7, 1:3, fun=function(x, y) {x+y})
membership = function(subs, obj) {bitwAnd(subs, bitShiftL(1, obj-1)) > 0}
vmembership = Vectorize(membership)
A = outer(1:n_subsets, 1:n_objects, vmembership)
A
NA * 1
NA * 0
membership = function(subs, obj) {ifelse(bitwAnd(subs, bitShiftL(1, obj-1)) > 0, 1, NA)}
vmembership = Vectorize(membership)
member_table = outer(1:n_subsets, 1:n_objects, vmembership)
member_table
outer(rep(1, 3), member_table)
A = outer(rep(1, 3), member_table)
A[1,,]
source('~/Dropbox/_R/RanCh/data-raw/universe.R')
source('~/Dropbox/_R/RanCh/data-raw/popn_generate_data.R')
source('~/Dropbox/_R/RanCh/data-raw/popn_generate_data.R')
dim(A)
dim(PC_counts)
source('~/Dropbox/_R/RanCh/data-raw/popn_generate_data.R')
PC_counts
PC_counts['Beer']
PC_counts['Beer',,]
t(PC_counts['Beer',,])
source('~/Dropbox/_R/RanCh/R/marginalize.R')
devtools::load_all(".")
library(RanCh)
rm marginalize
rm(marginalize)
library(RanCh)
source('~/Dropbox/_R/RanCh/R/marginalize.R')
devtools::load_all(".")
devtools::load_all(".")
source('~/Dropbox/_R/RanCh/R/marginalize.R')
devtools::load_all(".")
library(RanCh)
devtools::load_all(".")
library(RanCh)
source('~/Dropbox/_R/RanCh/R/marginalize.R')
library(RanCh)
source('~/Dropbox/_R/RanCh/R/marginalize.R')
source('~/Dropbox/_R/RanCh/R/marginalize.R')
library(RanCh)
rm)marginalize)
rm(marginalize)
marginalize
devtools::load_all(".")
library(RanCh)
devtools::load_all(".")
library(RanCh)
marginalize(PC_counts['Beer', , ], c(2,3,5))
P = marginalize(PC_counts['Beer', , ], c(2,3,5))
P
triplot()
plot_P3(P)
source('~/Dropbox/_R/RanCh/R/plot_P3.R')
plot_P3(P)
source('~/Dropbox/_R/RanCh/R/plot_P3.R')
plot_P3(P)
source('~/Dropbox/_R/RanCh/R/plot_P3.R')
plot_P3(P)
source('~/Dropbox/_R/RanCh/R/plot_P3.R')
plot_P3(P)
library(RanCh)
P = proportions(P)
P
library(RanCh)
N_bce = marginalize(PC_counts['Beer', , ], c(2,3,5))
P_bce = proportions(N_bce)
P_bce
library(RanCh)
N_bce = marginalize(PC_counts['Beer', , ], c(2,3,5))
P_bce = proportions(N_bce)
P_bce
proportions
library(RanCh)
library(RanCh)
N_bce = marginalize(PC_counts['Beer', , ], c(2,3,5))
P_bce = proportions(N_bce)
plot_P3(P_bce)
devtools::load_all(".")
help(plot_P3)
source('~/Dropbox/_R/RanCh/R/plot_P3.R')
devtools::load_all(".")
source('~/Dropbox/_R/RanCh/R/plot_P3.R')
devtools::load_all(".")
library(RanCh)
rm(plot_P3)
library(RanCh)
source('~/Dropbox/_R/RanCh/R/plot_P3.R')
source('~/Dropbox/_R/RanCh/R/regularity_X3.R')
library(RanCh)
P
PP_bce
P_bce
P = P_bce
P_max = c(min(P[3][1], P[5][1]), min(P[3][2], P[6][2]), min(P[5][3], P[6][3]))
P_masx
P_max
P[3][2]
P[3][1]
P[3][2]
P[6][2]
P[1][1]
P[1][2]
P[1][3]
P[3][2]
P[3,2]
source('~/Dropbox/_R/RanCh/R/regularity_X3.R')
devtools::load_all(".")
library(RanCh)
devtools::build_vignettes()
source('~/Dropbox/_R/RanCh/R/manual.R')
source('~/Dropbox/_R/RanCh/R/manual.R')
PC_demographics
source('~/Dropbox/_R/RanCh/R/multiplicative_X3.R')
library(RanCh)
iota = rep(1,10)
Sigma = diag(iota)
iota
Sigma
inv(Sigma + 0.4*iota*t(iota))
solve(Sigma + 0.4*iota*t(iota))
solve(Sigma + 0.4*iota %*% t(iota))
solve(0.6*Sigma + 0.4*iota %*% t(iota))
source('~/Dropbox/_R/RanCh/R/multiplicative_X3.R')
source('~/Dropbox/_R/RanCh/R/HPD.R')
source('~/Dropbox/_R/RanCh/R/HPD.R')
source('~/Dropbox/_R/RanCh/R/HPD.R')
v = c(1,2)
A = matrix(c(3,4,5,6), nrow=2, ncol=2, byrow=TRUE)
A
v
v*A
A*v
t(v)*A
source('~/Dropbox/_R/RanCh/R/HPD.R')
RCD_prior_1(2, 4)
source('~/Dropbox/_R/RanCh/R/HPD.R')
RCD_prior_1(2, 4)
A = RCD_prior_1(2, 4)
na.omit(A[3,])
A[3,]
na.exclude(A[3,])
B = na.exclude(A[3,])
class(B)
B
str(B)
str(B)[1]
na.pass(A[3,])
A[3,]
source('~/Dropbox/_R/RanCh/R/HPD.R')
Dir_mult_ML(A, A)
Dir_mult_ML(A[3,], A[3,])
Dir_mult_ML(na.omit(A[3,]), na.omit(A[3,]))
source('~/Dropbox/_R/RanCh/R/HPD.R')
Dir_mult_ML(na.omit(A[3,]), na.omit(A[3,]))
source('~/Dropbox/_R/RanCh/R/HPD.R')
Dir_mult_ML(A[3,], A[3,])
mapply(Dir_mult_ML, A, A)
source('~/Dropbox/_R/RanCh/R/HPD.R')
Ind_Dir_mult_ML(A, A, log=TRUE)
source('~/Dropbox/_R/RanCh/R/HPD.R')
triplot()
plot_HD_Dir_3(c(23, 13, 4), 0.95)
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(c(23, 13, 4), 0.95)
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(c(23, 13, 4), 0.95)
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(c(23, 13, 4), 0.95)
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(c(23, 13, 4), 0.95)
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(c(23, 13, 4), 0.95)
source('~/Dropbox/_R/RanCh/R/HPD.R')
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(c(23, 13, 4), 0.95)
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(c(23, 13, 4), 0.95)
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(c(23, 13, 4), 0.95)
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(c(23, 13, 4), 0.95)
alpha = c(23, 13, 4)
HD_probability = 0.95
p1 <- p2 <- seq(0, 1, by=0.001)
f <- outer(p1, p2, FUN=dDir, alpha)     # Evaluation of Di density on grid
f <- outer(p1, p2, FUN=dDir, alpha, log=FALSE)
p1
dim(p1)
dims(p1)
length(p1)
length(p2)
f <- outer(p1, p2, FUN=dDir, alpha, log=FALSE)
f <- outer(p1, p2, FUN=dDir, alpha)
source('~/Dropbox/_R/RanCh/R/HPD.R')
source('~/Dropbox/_R/RanCh/R/HPD.R')
f <- outer(p1, p2, FUN=dDir, alpha, log=FALSE)
p1 <- p2 <- seq(0, 1, by=0.001)
# Evaluation of Di density on grid
f <- outer(p1, p2, FUN=dDir3, alpha, log=FALSE)
dDir3(0.5, 0.25, c(1,2,3))
alpha
p = c(0.8, 0.1, 0.1)
ln_f = lgamma(sum(alpha)) - sum(lgamma(alpha))
ln_f
ln_f = lgamma(sum(alpha)) - sum(lgamma(alpha))
ln_f
ln_f = ln_f + sum(alpha-1)*log(p)
ln_f
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(0.95, alpha)
f <- outer(p1, p2, FUN=dDir3, alpha, log=FALSE)
length(p1)
length(p2)
length(alpha)
f
dDir3(0.8, 0.1, alpha = )
dDir3(0.8, 0.1, alpha)
dDir3(0.8, 0.1, alpha, log=FALSE)
f <- outer(p1, p2, FUN=dDir3, alpha, log=FALSE)
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(0.95, alpha)
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(0.95, alpha)
alpha
p1 <- p2 <- seq(0, 1, by=0.001)
# Evaluation of Di density on grid
f <- outer(p1, p2, FUN=dDir3, alpha, log=FALSE)
f
mean(f)
sd(f)
contour(f)
q.d = dDir3_quantile(1-HD_probability, alpha, FALSE)
q.d
cl = contourLines(p1, p2, f, levels = q.d) # Contour
cl
length(cl[[1]]$x)
cl[[1]]$x
cbind(cl[[1]]$x, cl[[1]]$y)
region = matrix(c(cl[[1]]$x, cl[[1]]$y, 1-cl[[1]]$x-cl[[1]]$y), byrow=FALSE, rnow=nrow)
region = matrix(c(cl[[1]]$x, cl[[1]]$y, 1-cl[[1]]$x-cl[[1]]$y), byrow=FALSE, nrow=nrow)
region = matrix(c(cl[[1]]$x, cl[[1]]$y, 1-cl[[1]]$x-cl[[1]]$y), byrow=FALSE, nrow=nrow, ncol=3)
HD_region = Dir3_HD_region(alpha, HD_probability)
polygon(tritrafo(HD_region), col='lightgreen')
source('~/Dropbox/_R/RanCh/R/HPD.R')
HD_region = Dir3_HD_region(alpha, HD_probability)
polygon(tritrafo(HD_region), col='lightgreen')
HD_region = Dir3_HD_region(alpha, HD_probability)
polygon(tritrafo(HD_region), col='lightgreen')
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(0.95, alpha = )
Dir3_HD_region(alpha, 0.95)
region = Dir3_HD_region(alpha, 0.95)
plot(polygon(region))
region
contour(f)
p1 <- p2 <- seq(0, 1, by=0.001)
# Evaluation of Di density on grid
f <- outer(p1, p2, FUN=dDir3, alpha, log=FALSE)
q.d = dDir3_quantile(1-HD_probability, alpha, FALSE)
cl = contourLines(p1, p2, f, levels = q.d) # Contour
nrow = length(cl[[1]]$x)
region = matrix(c(cl[[1]]$x, cl[[1]]$y, 1-cl[[1]]$x-cl[[1]]$y),
byrow=FALSE, nrow=nrow, ncol=3)
region
tritrafo(region)
triplot
triplot()
polygon(tritrafo(region))
polygon(tritrafo(region), col='lightgreen')
triplot()
plot_HD_Dir_3(alpha, 0.65)
plot_HD_Dir_3(alpha, 0.99)
A
A = A[1:7][1:3]
A
N_bce
plot_HD_Dir_3(N_bce, 0.95)
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(N_bce, 0.95)
A[7, ]
N_bce[7, ]
sum(N_bce[7,])
A = RCD_prior_1(3, 3) + N_bce
A
plot_HD_Dir_3(A, 0.95)
install.packages("Smisc")
library(RanCh)
N_bce
A
plot_HD_Dir_3(A, 0.95)
library(Smisc)
plot_HD_Dir_3(A, 0.95)
hpd(function(x) dbeta(x, A[3, 1], A[3, 2]), c(0, 1),
cdf = function(x) pbeta(x, A[3, 1], A[3, 2]), HD_probability)
hpd(function(x) dbeta(x, A[5, 1], A[5, 2]), c(0, 1),
cdf = function(x) pbeta(x, A[5, 1], A[5, 2]), HD_probability)
source('~/Dropbox/_R/RanCh/R/HPD.R')
plot_HD_Dir_3(A, 0.95)
library(RanCh)
library(RanCh)
library(RanCh)
A
A_prior
prior_A = RCD_prior_1(2.0, ncol(N_bce))
post_A = prior_A + N_bce
triplot(label=c('b', 'c', 'e'))
plot_HD_Dir3(post_A, 0.90)
prior_A = RCD_prior_1(2.0, ncol(N_bce))
post_A = prior_A + N_bce
triplot(label=c('b', 'c', 'e'))
plot_HD_Dir3(post_A, 0.90)
print(Ind_Dir_mult_ML(prior_A, N_bce, log=TRUE))
Ind_Dir_mult_ML(RCD_prior_1(seq(0.1, 2.0, by=0.1), 3))
Ind_Dir_mult_ML(RCD_prior_1(seq(0.1, 2.0, by=0.1), N_bce, 3))
Ind_Dir_mult_ML(RCD_prior_1(seq(0.1, 2.0, by=0.1), 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(0.1, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(0.2, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(0.3, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(0.4, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(0.5, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(0.6, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(1.0, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(2.0, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(2.4, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(2.2, 3), N_bce)
120*log(0.5) + 40*log(1/3)
Ind_Dir_mult_ML(RCD_prior_1(9, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(99, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(999, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(9999, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(99999, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(9999999, 3), N_bce)
Ind_Dir_mult_ML(RCD_prior_1(99999999999, 3), N_bce)
t = read.csv('data-raw/MC_data_files/108C.txt')
t = read.csv('data-raw/MC_data_files/1Atest.txt')
t = read.csv2('data-raw/MC_data_files/1Atest.txt')
t = read.csv2('data-raw/MC_data_files/1Atest.txt', as.is=TRUE)
tbl = read.delim('data-raw/MC_data_files/1Atest.txt', 'UCS-2LE')
tbl = read.csv2('data-raw/MC_data_files/1A.txt', skip=1, header=TRUE, fileEncoding='latin1')
tbl = read.csv2('data-raw/MC_data_files/1A.txt', skip=1, header=TRUE, fileEncoding='latin1', sep='\t')
tbl = read.csv2('data-raw/MC_data_files/1A.txt', skip=1, header=TRUE, fileEncoding='latin1', sep='\t', skipNul=TRUE)
names(tbl)
tbl2 = read.csv2('data-raw/MC_data_files/1A.txt', skip=1, header=TRUE, fileEncoding='latin1', sep='\t')
tbl2 = read.csv2('data-raw/MC_data_files/1A.txt', skip=1, header=TRUE, fileEncoding='latin1', sep='\t', skipNul=TRUE)
names(tbl2)
tbl$ExperimentName
tbl2$ExperimentName
names(table2)
names(tbl2)
tbl2 = read.csv2('data-raw/MC_data_files/2B.txt', skip=1, header=TRUE, fileEncoding='latin1', sep='\t', skipNul=TRUE)
tbl2$ExperimentName
tbl2$Subject
tbl$Subject
tbl$Session
tbl$Clock.Information
names(tbl)
summary(tbl[7:49])
tbl2 = read.csv2('data-raw/MC_data_files/10A.txt', skip=1, header=TRUE, fileEncoding='latin1', sep='\t', skipNul=TRUE)
names(tbl2)
tbl2$ExperimentName
tbl2$Subject
names(tbl2)
summary(tbl2)
tbl = merge(tbl, tbl2)
names(tbl)
summaru(tbl)
summary(tbl)
summary(tbl$Trial)
tbl$Trial
tbl = read.csv2('data-raw/MC_data_files/1A.txt', skip=1, header=TRUE, fileEncoding='latin1', sep='\t', skipNul=TRUE)
tbl_merge = merge(tbl, tlb2)
tbl_merge = merge(tbl, tbl2)
tbl$Subject
tbl2$Subject
tbl_merge$Subject
dim(tbl)
dim(tbl2)
dim(tbl_merge)
tbl_bind = rbind(tbl, tbl2)
dim(tbl_bind)
summary(tbl_bind$Trial)
plot(tbl_bind$Trial)
letters[1:4]
Letters[1:4]
LETTERS[1:5]
names(tbl)
summary(tbl[8:49])
summary(tbl_bind[8:49])
plot(tbl_bind$TrialList)
plot(tbl_bind$TrialList.Cycle)
plot(tbl_bind$TrialList.Sample)
plot(tbl_bind$TrialList)
levels(g1)
levels(tbl$g1)
levels(tbl$g3)
# Gamble names, distractor names, vector of all names
g_names = sprintf('Gamble_%s.bmp', LETTERS[1:5])
d_names = sprintf('D%i.bmp', 1:9)
all_names = c(g_names, d_names, 'b.bmp')
numeric_objects = 1:length(all_names)
names(numeric_objects) = all_names
numeric_objects['b.bmp']
numeric_objects['D1.bmp']
numeric_objects['D1.bmp'] + numeric_objects['D2.bmp']
all_names
numeric_objects = c(1:(length(all_names)-1), NA)
names(numeric_objects) = all_names
numeric_objects['b.bmp']
numeric_objects['D1.bmp']
A = array(c(1,2,3,4), nrow=2, ncol=2)
A = array(c(1,2,3,4), nrows=2, ncols=2)
A = matrix(c(1,2,3,4), nrows=2, ncols=2)
A = matrix(c(1,2,3,4), nrow=2, ncol=2)
numeric_objects[A]
A
numeric_objects[t(A)]
v = tbl_bind[c(sprintf('g%i', 1:5), 'ClickedGamble')]
head(v)
numeric_objects[v[1:5]]
numeric_objects[[v[1:5]]]
numeric_objects[v[1:5]]
v[1:5]
v = apply(v, 2, function(x) numeric_objects[x])
v
v$choice = v$ClickedGamble
v
v = v[1:5]
v
v = tbl_bind[sprintf('g%i', 1:5)]
v
vv = apply(v, 2, function(x) numeric_objects[x])
vv
vv = cbind(vv, tbl_bind$ClickedGamble)
vv
source('~/Dropbox/_R/RanCh/data-raw/MC_generate_data.R')
letterCodes
i = 1
filename = sprintf('data-raw/MC_data_files/%i%s', i, letterCodes[i])
filename
source('~/Dropbox/_R/RanCh/data-raw/MC_generate_data.R')
i
dim(MC_raw)
dim(t_i)
names(t_i)
source('~/Dropbox/_R/RanCh/data-raw/MC_generate_data.R')
source('~/Dropbox/_R/RanCh/data-raw/MC_generate_data.R')
source('~/Dropbox/_R/RanCh/data-raw/MC_generate_data.R')
dim(MC_raw)
dim(t_i)
source('~/Dropbox/_R/RanCh/data-raw/MC_generate_data.R')
source('~/Dropbox/_R/RanCh/data-raw/MC_generate_data.R')
filename
i
t_i = read.csv2(filename, skip=1, sep='\t', skipNul=TRUE)
dim(t_i)
dim(MC_raw)
i
for (i in 1:length(letterCodes)) {
filename = sprintf('data-raw/MC_data_files/%i%s.txt', i, letterCodes[i])
t_i = read.csv2(filename, skip=1, header=TRUE, fileEncoding='latin1', sep='\t', skipNul=TRUE)
MC_raw = ifelse(i==1, t_i, rbind(MC_raw, t_i))
print(sprintf('%i%s', i, filename))
}
filename
dim(t_i)
dim(MC_raw)
MC_raw = t_i
dim(MC_raw)
MC_raw = ifelse(i==2, t_i, rbind(MC_raw, t_i))
dim(MC_raw)
source('~/Dropbox/_R/RanCh/data-raw/MC_generate_data.R')
names(MC_raw)
names(t_i)
dim(t_i)
