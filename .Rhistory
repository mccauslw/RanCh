source('~/Git_repos/RanCh/R/simplex.R')
install.packages(c("klaR", "bitops", "Smisc", "ggtern"))
library(RanCh)
library(RanCh)
help(MC_raw)
help(MC_trials)
install.packages("tidyverse")
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
help(marginalize)
library(RanCh)
marginalize()
PC_trials
MC_trials
compute_set_choice_vars
sin
ls
source('~/Git_repos/RanCh/data-raw/YG_generate_data.R')
source('~/Git_repos/RanCh/data-raw/YG_generate_data.R')
YG_counts
YG_counts['Outcome', 1, ,]
YG_counts['Outcome', 2, ,]
chisq.test(YG_counts['Outcomes', 1, ,'abcd'], YG_counts['Outcomes', 2, , 'abcd'])
chisq.test(YG_counts['Outcomes', 1, 'abcd', ], YG_counts['Outcomes', 2, 'abcd', ])
chisq.test(YG_counts['Outcome', 1, 'abcd', ], YG_counts['Outcome', 2, 'abcd', ])
chisq.test(cbind(YG_counts['Outcome', 1, 'abcd', ], YG_counts['Outcome', 2, 'abcd', ]))
Xsq = chisq.test(cbind(YG_counts['Outcome', 1, 'abcd', ], YG_counts['Outcome', 2, 'abcd', ]))
Xsq
Xsq$observed
Xsq$expected
Xsq$residuals
Xsq$stdres
str(Xsq)
Xsq = chisq.test(cbind(YG_counts['Outcome', 1, 'abc', ], YG_counts['Outcome', 2, 'abc', ]))
A = YG_counts['Outcome', 'abc', ]
A = YG_counts['Outcome', ,'abc', ]
A
t(A)
t(omit.na(A))
t(na.omit(A))
na.omit(t(A))
chisq.test(na.omit(t(A)))
my.chisq.test = function(A)
{
x = na.omit(t(A))
if (nrow(A) > 1) {
chi2 = chisq.test(x)
chi2$p.value
} else NA
}
apply(YG_counts, c(1, 3), my.chisq.test)
apply(YG_counts, c(1, 3), nrow)
apply(YG_counts, c(1, 3), ncol)
my.chisq.test = function(A)
{
x = na.omit(t(A))
if (nrow(x) > 1) {
chi2 = chisq.test(x)
chi2$p.value
} else NA
}
apply(YG_counts, c(1, 3), my.chisq.test)
my.chisq.test = function(A)
{
x = na.omit(t(A))
if (nrow(x) > 1) {
chi2 = chisq.test(x)
chi2$p.value
} else NA
}
M = apply(YG_counts, c(1, 3), my.chisq.test)
hist(M)
my.chisq.test = function(A)
{
x = na.omit(t(A))
if (nrow(x) > 1) {
chi2 = chisq.test(x)
chi2$p.value
} else NA
}
M = apply(YG_counts, c(1, 3), my.chisq.test)
hist(M, 20)
M
Xsq
Xsq$method
PC_trials
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
PC_trials
MC_trials
YG_trials
v = c(a=1, b=2, c=4)
v
str
str(v)
unname(v)
PC_trials
PC_trials[1:4] = PC_trials[4:1]
PC_trials
PC_trials[1:4] = PC_trials[4:1]
PC_trials
PC_trials %>% select(domain, subj, block, trial)
PC_trials %>% select(domain, subj, domain, trial)
PC_trials %>% select(oneof("domain", "subj", "domain", "trial"))
PC_trials %>% select(one_of("domain", "subj", "domain", "trial"))
PC_trials %>% select(one_of("domain", "subj", "block", "trial"))
PC_trials %>% select(one_of("domain", "subj", "block", "trial", "duration"))
PC_trials %>% select(one_of("domain", "subj", match("block"), "trial", "duration"))
PC_trials %>% select(one_of("domain", "subj", matches("block"), "trial", "duration"))
PC_trials %>% select(domain, matches("block"), trial, matches("duration"))
names(PC_trials)
"ad" in names(PC_trials)
if ("ad" in names(PC_trials)) TRUE else FALSE
source('data-raw/trial.R')
source('data-raw/trial.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
PC_trial %>% compute_set_choice_vars()
PC_trials %>% compute_set_choice_vars()
PC_trials
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('data-raw/universe.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
PC_trials %>% compute_set_choice_vars()
PC_trials %>% mutate(set_vector=subs_vec) %>% compute_set_choice_vars()
PC_trials %>% mutate(set_vector=subs_vec) %>% compute_set_choice_vars() %>% select(begins_with('set'))
PC_trials %>% mutate(set_vector=subs_vec) %>% compute_set_choice_vars() %>% select(starts_with('set'))
source('data-raw/trial.R')
PC_trials %>% mutate(set_vector=subs_vec) %>% compute_set_choice_vars() %>% select(starts_with('set'))
PC_trials %>% mutate(set_vector=subs_vec) %>% compute_set_choice_vars() %>% select(starts_with('set')) %>% arrange_set_choice_vars()
PC_trials %>% mutate(set_vector=subs_vec) %>% compute_set_choice_vars()  %>% arrange_set_choice_vars()
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
PC_trials
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/R/similarity_X3.R')
S = similarity(0.5, 0.5)
S = similarity_X3(0.5, 0.5)
source('~/Git_repos/RanCh/R/similarity_X3.R')
S = similarity_X3(0.5, 0.5)
S
library(RanCh)
devtools::load_all(".")
library(RanCh)
help(similarity_X3)
source('~/Git_repos/RanCh/R/similarity_X3.R')
library(RanCh)
help(similarity_X3)
S
rowMeans(S$So)
install.packages("Ternary")
library(Ternary)
source('~/Git_repos/RanCh/R/compromise_X3.R')
C = compromise_X3(0.5, 0.6)
source('~/Git_repos/RanCh/R/compromise_X3.R')
C = compromise_X3(0.5, 0.6)
C
library(RanCh)
library(RanCh)
help(compromise_X3)
library(RanCh)
source('~/Git_repos/RanCh/R/compromise_X3.R')
devtools::load_all(".")
library(RanCh)
rm(similarity_X3, envir='.GlobalEnv')
rm(similarity_X3, envir=.GlobalEnv)
rm(compromise_X3, envir=.GlobalEnv)
help("similarity_X3")
help("compromise_X3")
source('~/Git_repos/RanCh/data-raw/universe.R')
source('~/Git_repos/RanCh/R/proportions.R')
PC_P = proportiions(PC_counts)
PC_P = proportions(PC_counts)
source('~/Git_repos/RanCh/data-raw/universe.R')
library(bitops)
source('~/Git_repos/RanCh/data-raw/universe.R')
source('~/Git_repos/RanCh/data-raw/universe.R')
source('~/Git_repos/RanCh/R/proportions.R')
PC_P = proportions(PC_counts)
help(PC_counts)
PC_P = proportions(PC_counts[1,,])
PC_P
PC_counts[1,,]
source('~/Git_repos/RanCh/R/proportions.R')
PC_P = proportions(PC_counts[1,,])
PC_P
singletons
singletons[1:n_objects]
source('~/Git_repos/RanCh/R/proportions.R')
PC_P = proportions(PC_counts[1,,])
PC_P
singlertons[i]
singletons[i]
P
source('~/Git_repos/RanCh/R/proportions.R')
PC_P = proportions(PC_counts[1,,])
PC_P
P[singletons[3], 3]
PC_P[singletons[3], 3]
source('~/Git_repos/RanCh/R/proportions.R')
PC_P = proportions(PC_counts[1,,])
PC_P
target = 1, competitor = 2, decoy = 3
target = 1; competitor = 2; decoy = 3
T = sum(bitShiftL(1, c(target, competitor, decoy)-1))
# Construct two binary sets {t, d} and {c, d}
td = sum(bitShiftL(1, c(target, decoy)-1))
cd = sum(bitShiftL(1, c(target, decoy)-1))
T
td
cd
A = c(pxz, 0, 1-pxz)
Ap = c(pxz, 1-pxz, 0)
App = c(0, pxz, 1-pxz)
pxz = 0.45
A = c(pxz, 0, 1-pxz)
Ap = c(pxz, 1-pxz, 0)
App = c(0, pxz, 1-pxz)
A
Ap
App
rbind(A, Ap, App)
View(proportions)
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/trial.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
library(RanCh)
devtools::load_all(".")
library(RanCh)
file.path(R.home("doc"), "KEYWORDS")
library(RanCh)
library(RanCh)
source('~/Git_repos/RanCh/R/compromise_X3.R')
library(RanCh)
library(RanCh)
PC_trials
YG_trials
MC_counts
dim(MC_counts)
MC_raw
names(MC_raw)
MC_trials
library(RanCh)
PC_counts
dim(PC_counts)
dim(YG_counts)
YG_raw
names(YG_raw)
names(PC_raw)
summary(PC_raw)
hist(PC_raw$set)
library(RanCh)
source(set_index.R)
source(R/set_index.R)
source('R/set_index.R')
selection = c(1,3,4)
set_123 = set_index(selection)
set_12 = set_bin(selection[c(1,2)])
set_23 = set_bin(selection[c(2,3)])
set_13 = set_bin(selection[c(1,3)])
set_123 = set_index(selection)
set_12 = set_index(selection[c(1,2)])
set_23 = set_index(selection[c(2,3)])
set_13 = set_index(selection[c(1,3)])
set_123
set_12
set_13
set_23
binary2ternary <- function(binary_points, ternary_cols)
{
ternary_points <- matrix(0, nrow=nrow(binary_points), ncol=3)
ternary_points[, ternary_cols[1]] <- binary_points[, 1]
ternary_points[, ternary_cols[2]] <- binary_points[, 2]
ternary_points
}
binary2ternary(c(0.6, 0.4), c(2,3))
binary2ternary(matrix(c(0.6, 0.4), nrow=1), c(2,3))
binary2ternary(matrix(c(0.6, 0.4), nrow=1), c(3,2))
library(RanCh)
library(RanCh)
library(RanCh)
library(RanCh)
dDir(c(0.1, 0.3, 0.6), c(2.5, 0.5, 1.0))
library(RanCh)
help(PC_raw
)
library(RanCh)
help("similarity_X3")
library(RanCh)
library(RanCh)
library(RanCh)
library(RanCh)
library(RanCh)
library(RanCh)
rDir <-function(n, alpha) {
p <- matrix(0, nrow=n, ncol=ncol(alpha))
for (i in 1:ncol(alpha)) p[, i] = rgamma(n, alpha[i])
p = p/rowSums(p)
}
p = rDir(1000, c(12, 5, 20))
rDir <-function(n, alpha) {
p <- matrix(0, nrow=n, ncol=length(alpha))
for (i in 1:ncol(alpha)) p[, i] = rgamma(n, alpha[i])
p = p/rowSums(p)
}
p = rDir(1000, c(12, 5, 20))
rDir <-function(n, alpha) {
K <- length(alpha)
p <- matrix(0, nrow=n, ncol=K)
for (i in 1:K) p[, i] = rgamma(n, alpha[i])
p = p/rowSums(p)
}
p = rDir(1000, c(12, 5, 20))
mean(p)
colMeans(p)
p = rDir(1000, c(1, 1, 1)) # Uniform distribution on 2-simplex
#' triplot(label=c('x', 'y', 'z'))
#' plot(tritrafo(p))
triplot(label=c('x', 'y', 'z'))
library(klaR)
triplot(label=c('x', 'y', 'z'))
plot(tritrafo(p))
plot(tritrafo(p), pch=20)
source('~/Git_repos/RanCh/R/similarity.R')
source('~/Git_repos/RanCh/R/compromise.R')
n = 1000
filt = vector('logical', n)
p = rDir(n, c(1, 1, 1)) # Uniform distribution on 2-simplex
triplot(label=c('x', 'y', 'z'))
for (i in 1:n) {
P = create_P3(0.4, 0.5, 0.0, p[i,1], p[i,2])
filt[i] = similarity(P)
}
points(tritrafo(P[filt, ]))
n = 1000
filt = vector('logical', n)
p = rDir(n, c(1, 1, 1)) # Uniform distribution on 2-simplex
triplot(label=c('x', 'y', 'z'))
for (i in 1:n) {
P = create_P3(0.4, 0.5, 0.0, p[i,1], p[i,2])
filt[i] = similarity(P, target=x, decoy=y, competitor=z)
}
points(tritrafo(P[filt, ]))
n = 1000
filt = vector('logical', n)
p = rDir(n, c(1, 1, 1)) # Uniform distribution on 2-simplex
triplot(label=c('x', 'y', 'z'))
for (i in 1:n) {
P = create_P3(0.4, 0.5, 0.0, p[i,1], p[i,2])
filt[i] = similarity(P, target=1, decoy=2, competitor=3)
}
points(tritrafo(P[filt, ]))
n = 1000
filt = vector('logical', n)
p = rDir(n, c(1, 1, 1)) # Uniform distribution on 2-simplex
triplot(label=c('x', 'y', 'z'))
for (i in 1:n) {
P = create_P3(0.4, 0.5, 0.0, p[i,1], p[i,2])
filt[i] = similarity(P, target=1, decoy=2, competitor=3)
}
points(tritrafo(p[filt, ]))
filt
P
n = 1000
filt = vector('logical', n)
p = rDir(n, c(1, 1, 1)) # Uniform distribution on 2-simplex
triplot(label=c('x', 'y', 'z'))
for (i in 1:n) {
P = create_P3(0.0, 0.4, 0.6, p[i,1], p[i,2])
filt[i] = similarity(P, target=1, decoy=2, competitor=3)
}
points(tritrafo(p[filt, ]))
P
filt
n = 1000
filt = vector('logical', n)
p = rDir(n, c(1, 1, 1)) # Uniform distribution on 2-simplex
triplot(label=c('x', 'y', 'z'))
for (i in 1:n) {
P = create_P3(0.5, 0.4, 0.6, p[i,1], p[i,2])
filt[i] = similarity(P, target=1, decoy=2, competitor=3)
}
points(tritrafo(p[filt, ]))
filt
P
x=1; y=2; z=3
T = set_index(c(x, y, z))
# Construct two binary sets {t, d} and {c, d}
xz = set_index(c(x, z))
yz = set_index(c(y, z))
# Contruct relevant probabilities
sim_1 = P[xz, x] > P[T, x]/(P[T, x] + P[T, z])
sim_2 = P[yz, y] > P[T, y]/(P[T, y] + P[T, z])
T
xz
yz
sim_1
sim_2
P[xz, x]
P[T, x]
P[T, z]
source('~/Git_repos/RanCh/R/similarity.R')
n = 1000
filt = vector('logical', n)
p = rDir(n, c(1, 1, 1)) # Uniform distribution on 2-simplex
triplot(label=c('x', 'y', 'z'))
for (i in 1:n) {
P = create_P3(0.5, 0.4, 0.6, p[i,1], p[i,2])
filt[i] = similarity(P, target=1, decoy=2, competitor=3)
}
points(tritrafo(p[filt, ]))
points(tritrafo(p[filt, ]), pch=20)
points(tritrafo(p[filt, ]), pch=21)
n = 1000
filt = vector('logical', n)
p = rDir(n, c(1, 1, 1)) # Uniform distribution on 2-simplex
triplot(label=c('x', 'y', 'z'))
for (i in 1:n) {
P = create_P3(0.5, 0.4, 0.6, p[i,1], p[i,2])
filt[i] = similarity(P, target=1, decoy=2, competitor=3)
}
points(tritrafo(p[filt, ]), pch=21)
n = 1000
filt = vector('logical', n)
p = rDir(n, c(1, 1, 1)) # Uniform distribution on 2-simplex
triplot(label=c('x', 'y', 'z'))
for (i in 1:n) {
P = create_P3(0.5, 0.4, 0.6, p[i,1], p[i,2])
filt[i] = similarity(P, target=1, decoy=2, competitor=3, two_sided=TRUE)
}
points(tritrafo(p[filt, ]), pch=21)
library(RanCh)
devtools::load_all(".")
library(RanCh)
source('~/Git_repos/RanCh/R/HPD.R')
source('~/Git_repos/RanCh/R/HPD.R')
library(RanCh)
library(RanCh)
library(RanCh)
YG_demographics
source('~/Git_repos/RanCh/data-raw/YG_generate_data.R')
install.packages("Smisc")
library(RanCh)
library(RanCh)
library(RanCh)
library(RanCh)
source('~/Git_repos/RanCh/R/BM_terms.R')
library(RanCh)
library(RanCh)
devtools::load_all(".")
library(RanCh)
library(RanCh)
library(RanCh)
library(RanCh)
library(RanCh)
library(RanCh)
library(RanCh)
manual(RanCh)
PC_counts
dimnames(PC_counts)
dimnames(YG_counts)
dimnames(MC_counts)
source('~/Git_repos/RanCh/data-raw/universe.R')
source('~/Git_repos/RanCh/data-raw/RDS_2011.R')
source('~/Git_repos/RanCh/data-raw/RDS_2011.R')
source('~/Git_repos/RanCh/data-raw/RDS_2011.R')
RDS['Cash 1', 5,,]
RDS_2011_counts['Cash 1', 5,,]
source('~/Git_repos/RanCh/data-raw/RDS_2011.R')
RDS['Cash 1', 5,,]
RDS_2011_counts['Cash 1', 5,,]
dim(RDS_2011_counts)
RDS_2011_counts['Cash 1', 5, 'ab', 'a']
RDS_2011_counts[1, 5, 3, 1]
RDS_2011_counts['Cash 1', 5, doubletons[1:choose(5, 2)],]
devtools::load_all(".")
source('~/Git_repos/RanCh/data-raw/universe.R')
doubletons
library(RanCh)
devtools::load_all(".")
PC_counts
source('~/Git_repos/RanCh/data-raw/T_1972_generate_data.R')
T_1972_counts["Dots", 5, ,]
doubletons
T_1972_counts['Dots', 5, 'xyz', 'x']
T_1972_counts[1, 5, 7, 1]
RDS_2011_counts['Gambles', 1, c('xy', 'yz', 'xz', 'xyz'), ]
RDS_2011_counts['Gambles', 1, ,, ]
RDS_2011_counts['Gambles', 1, , ]
dimnames(T_1972_counts)
T_1972_counts['Gambles', 1, c('xy', 'yz', 'xz', 'xyz'), ]
T_1972_counts['Gambles', 1, c('xz', 'yz', 'xyz'), ]
RDS_2011_counts['Cash 1', 5, c(3, 5, 6, 9, 10, 12), ]
devtools::load_all(".")
source('~/Git_repos/RanCh/data-raw/T_1972_generate_data.R')
source('~/Git_repos/RanCh/data-raw/T_1972_generate_data.R')
library(RanCh)
help(set_index)
doubletons
help(set_index)
source('~/Git_repos/RanCh/R/set_index.R')
library(RanCh)
help(set_index)
help(set_index)
library(RanCh)
help(set_index)
library(RanCh)
source('~/Git_repos/RanCh/data-raw/T_1969_generate_data.R')
dimnames(T_1969_counts)
source('~/Git_repos/RanCh/data-raw/universe.R')
source('~/Git_repos/RanCh/data-raw/T_1969_generate_data.R')
T_1969_counts[1,,]
source('~/Git_repos/RanCh/data-raw/T_1969_generate_data.R')
source('~/Git_repos/RanCh/data-raw/T_1969_generate_data.R')
T_1969_counts[1,,]
T_1969_counts[1,,]
source('~/Git_repos/RanCh/R/T_1969_data.R')
print(T_1969_counts[1,,])
print(T_1969_counts[1,,], na.print='-')
print(T_1969_counts[1,,], na.print='.')
