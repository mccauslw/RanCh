subs = as.factor(subset_names[subs_bin])
)
MC_trials <- MC_raw %>% as_tibble() %>%
select(num_range("g", 1:5), subj = Subject, trial = Trial, index=ClickedGamble) %>%
mutate_at(vars(num_range("g", 1:5)), code) %>%
filter(g1 <= n_objects, !is.na(index)) %>%
mutate(
choice_int = case_when(
index==1 ~ g1, index==2 ~ g2, index==3 ~ g3, index==4 ~ g4, index==5 ~ g5
),
choice = as.factor(object_names[choice_int]),
g = pmap(.[1:5], c),
subs_conf = map_chr(g, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map_int(g, function(l) sum(bitShiftL(1, l-1), na.rm=TRUE)),
subs = as.factor(subset_names[subs_bin])
)
MC_trials <- MC_raw %>% as_tibble() %>%
select(num_range("g", 1:5), subj = Subject, trial = Trial, index=ClickedGamble) %>%
mutate_at(vars(num_range("g", 1:5)), code) %>%
filter(g1 <= n_objects, !is.na(index)) %>%
mutate(
choice_int = case_when(
index==1 ~ g1, index==2 ~ g2, index==3 ~ g3, index==4 ~ g4, index==5 ~ g5
),
choice = as.factor(object_names[choice_int]),
g = pmap(.[1:5], c),
subs_conf = map_chr(g, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map(g, function(l) sum(bitShiftL(1, l-1), na.rm=TRUE)),
subs = as.factor(subset_names[subs_bin])
)
library(RanCh)
MC_trials <- MC_raw %>% as_tibble() %>%
select(num_range("g", 1:5), subj = Subject, trial = Trial, index=ClickedGamble) %>%
mutate_at(vars(num_range("g", 1:5)), code) %>%
filter(g1 <= n_objects, !is.na(index)) %>%
mutate(
choice_int = case_when(
index==1 ~ g1, index==2 ~ g2, index==3 ~ g3, index==4 ~ g4, index==5 ~ g5
),
choice = as.factor(object_names[choice_int]),
g = pmap(.[1:5], c),
subs_conf = map_chr(g, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map(g, function(l) sum(bitShiftL(1, l-1), na.rm=TRUE)),
subs = as.factor(subset_names[subs_bin])
)
MC_trials <- MC_raw %>% as_tibble() %>%
select(num_range("g", 1:5), subj = Subject, trial = Trial, index=ClickedGamble) %>%
mutate_at(vars(num_range("g", 1:5)), code) %>%
filter(g1 <= n_objects, !is.na(index)) %>%
mutate(
choice_int = case_when(
index==1 ~ g1, index==2 ~ g2, index==3 ~ g3, index==4 ~ g4, index==5 ~ g5
),
choice = as.factor(object_names[choice_int]),
g = pmap(.[1:5], c),
subs_conf = map_chr(g, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map(g, function(l) sum(bitShiftL(1, l-1), na.rm=TRUE)),
#subs = as.factor(subset_names[subs_bin])
)
MC_trials <- MC_raw %>% as_tibble() %>%
select(num_range("g", 1:5), subj = Subject, trial = Trial, index=ClickedGamble) %>%
mutate_at(vars(num_range("g", 1:5)), code) %>%
filter(g1 <= n_objects, !is.na(index)) %>%
mutate(
choice_int = case_when(
index==1 ~ g1, index==2 ~ g2, index==3 ~ g3, index==4 ~ g4, index==5 ~ g5
),
choice = as.factor(object_names[choice_int]),
g = pmap(.[1:5], c),
subs_conf = map_chr(g, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map(g, function(l) sum(bitShiftL(1, l-1), na.rm=TRUE)),
#subs = as.factor(subset_names[subs_bin])
)
View(MC_trials)
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
library(RanCh)
source('~/Git_repos/RanCh/R/MC_data.R')
library(RanCh)
help(MC_trials)
help(PC_trials)
#' Population Choice experiment data
#'
#' Record of every choice made by every respondant.
#'
#' @format A data frame with 17 variables:
#' \describe{
#' \item{\code{design}}{}
#' \item{\code{gender}}{Sex of respondant: 1 for male, 2 for female}
#' }
"MC_raw"
source('~/Git_repos/RanCh/R/MC_data.R')
library(RanCh)
help(MC_raw)
help(PC_raw)
devtools::load_all(".")
devtools::load_all(".")
library(RanCh)
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
n_domains
n_lines
33344/32
dim(PC_raw)
View(PC_trials)
object_names
subset_names
source('~/Git_repos/RanCh/data-raw/universe.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
View(MC_trials)
subset_names[MC_trials[subs_bin]]
subset_names[MC_trials$subs_bin]
MC_trials$subs_bin
MC_trials
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
MC_trials <- MC_raw %>% as_tibble() %>%
select(num_range("g", 1:5), subj = Subject, trial = Trial, index=ClickedGamble) %>%
mutate_at(vars(num_range("g", 1:5)), code) %>%
filter(g1 <= n_objects, !is.na(index)) %>%
mutate(
choice_int = case_when(
index==1 ~ g1, index==2 ~ g2, index==3 ~ g3, index==4 ~ g4, index==5 ~ g5
),
choice = as.factor(object_names[choice_int]),
g = pmap(.[1:5], c),
subs_conf = map_chr(g, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map_dbl(g, function(l) sum(bitShiftL(1, l-1), na.rm=TRUE)),
subs = as.factor(subset_names[subs_bin])
)
MC_trials
summary(MC_trials$subs_bin)
hist(MC_trials$subs_bin)
x = bitShiftL(1, 3)
x
str(x)
is.integer(x)
is.real(x)
is.double(x)
as.integer(x)
intx = as.integer(x)
str(intx)
MC_trials <- MC_raw %>% as_tibble() %>%
select(num_range("g", 1:5), subj = Subject, trial = Trial, index=ClickedGamble) %>%
mutate_at(vars(num_range("g", 1:5)), code) %>%
filter(g1 <= n_objects, !is.na(index)) %>%
mutate(
choice_int = case_when(
index==1 ~ g1, index==2 ~ g2, index==3 ~ g3, index==4 ~ g4, index==5 ~ g5
),
choice = as.factor(object_names[choice_int]),
g = pmap(.[1:5], c),
subs_conf = map_chr(g, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map_int(g, function(l) sum(as.integer(bitShiftL(1, l-1)), na.rm=TRUE)),
subs = as.factor(subset_names[subs_bin])
)
MC_trials
MC_trials <- MC_raw %>% as_tibble() %>%
select(num_range("g", 1:5), subj = Subject, trial = Trial, index=ClickedGamble) %>%
mutate_at(vars(num_range("g", 1:5)), code) %>%
filter(g1 <= n_objects, !is.na(index)) %>%
mutate(
choice_int = case_when(
index==1 ~ g1, index==2 ~ g2, index==3 ~ g3, index==4 ~ g4, index==5 ~ g5
),
choice = as.factor(object_names[choice_int]),
g = pmap(.[1:5], c),
subs_conf = map_chr(g, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map_int(g, function(l) sum(as.integer(bitShiftL(1, l-1)), na.rm=TRUE)),
subs = as.factor(subset_names[subs_bin])
)
MC_trials$subs
MC_trials <- MC_raw %>% as_tibble() %>%
select(num_range("g", 1:5), subj = Subject, trial = Trial, index=ClickedGamble) %>%
mutate_at(vars(num_range("g", 1:5)), code) %>%
filter(g1 <= n_objects, !is.na(index)) %>%
mutate(
choice_int = case_when(
index==1 ~ g1, index==2 ~ g2, index==3 ~ g3, index==4 ~ g4, index==5 ~ g5
),
choice = as.factor(object_names[choice_int]),
g = pmap(.[1:5], c),
subs_conf = map_chr(g, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map_int(g, function(l) sum(as.integer(bitShiftL(1, l-1)), na.rm=TRUE)),
subs = as.factor(subset_names[subs_bin])) %>%
select(-num_range("g", 1:5))
MC_trials
MC_trials <- MC_raw %>% as_tibble() %>%
select(num_range("g", 1:5), subj = Subject, trial = Trial, index=ClickedGamble) %>%
mutate_at(vars(num_range("g", 1:5)), code) %>%
filter(g1 <= n_objects, !is.na(index)) %>%
mutate(
g = pmap(.[1:5], c),
ci = map2_int(g, index, function(g, index) g[index]),
choice_int = case_when(
index==1 ~ g1, index==2 ~ g2, index==3 ~ g3, index==4 ~ g4, index==5 ~ g5
),
choice = as.factor(object_names[choice_int]),
subs_conf = map_chr(g, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map_int(g, function(l) sum(as.integer(bitShiftL(1, l-1)), na.rm=TRUE)),
subs = as.factor(subset_names[subs_bin])) %>%
select(-num_range("g", 1:5))
MC_trials
PC_trials
MC_trials <- MC_raw %>% as_tibble() %>%
select(num_range("g", 1:5), subj = Subject, trial = Trial, index=ClickedGamble) %>%
mutate_at(vars(num_range("g", 1:5)), code) %>%
filter(g1 <= n_objects, !is.na(index)) %>%
mutate(
g = pmap(.[1:5], c),
choice_int = map2_int(g, index, function(g, index) g[index]),
choice = as.factor(object_names[choice_int]),
subs_conf = map_chr(g, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map_int(g, function(l) sum(as.integer(bitShiftL(1, l-1)), na.rm=TRUE)),
subs = as.factor(subset_names[subs_bin])) %>%
select(-num_range("g", 1:5), -index)
MC_trials
View(MC_trials)
MC_trials <- MC_raw %>% as_tibble() %>%
select(num_range("g", 1:5), subj = Subject, trial = Trial, index=ClickedGamble) %>%
mutate_at(vars(num_range("g", 1:5)), code) %>%
filter(g1 <= n_objects, !is.na(index)) %>%
mutate(
g = pmap(.[1:5], c, usenames=FALSE),
choice_int = map2_int(g, index, function(g, index) g[index]),
choice = as.factor(object_names[choice_int]),
subs_conf = map_chr(g, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map_int(g, function(l) sum(as.integer(bitShiftL(1, l-1)), na.rm=TRUE)),
subs = as.factor(subset_names[subs_bin])) %>%
select(-num_range("g", 1:5), -index)
View(MC_trials)
MC_trials[doubleton_names[1:choose(n_objects, 2)]] =
t(apply(MC_trials[c('subs_bin', 'choice_int')], 1,
function(v) {RP_table[v['subs_bin'], v['choice_int'], 1:choose(n_objects, 2)]}))
MC_trials
n_objects
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
MC_count_dimnames
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
MC_count_dimnames
length(MC_count_dimnames)
n_subjects
n_subsets
n_objects
PC_counts
dimnames(PC_counts)
MC_table <- table(MC_trials[c('subj', 'subs_bin', 'choice_int')])
MC_count_dimnames <- dimnames(MC_table)
names(MC_count_dimnames) <- c('Subject', 'Subset', 'Object')
MC_count_dimnames$Object <- object_names[1:n_objects]
MC_count_dimnames$Subset <- subset_names[1:n_subsets]
MC_counts <- array(0, dim=c(n_subjects, n_subsets, n_objects), dimnames = MC_count_dimnames)
MC_counts[, (1:n_subsets)[subset_card[1:n_subsets]>1], ] <- MC_table
MC_counts <- MC_counts * outer(rep(1, n_subjects), member_table[1:n_subsets, 1:n_objects])
length(MC_count_dimnames)
c(n_subjects, n_subsets, n_objects)
str(MC_count_dimnames)
summary(MC_trials$subj
)
levels(MC_trials$subj)
hist(MC_trials$subj)
MC_trials$subj
MC_table
dimnames(MC_table)
MC_trials %>% filter(subj==59)
MC_trials %>% filter(subj==58)
MC_trials %>% filter(subj==60)
MC_raw
MC_raw[MC_raw$subj==59]
MC_raw[MC_raw$subj==59,]
MC_raw[MC_raw$subj==60,]
MC_raw[MC_raw$Subject==60,]
MC_raw[MC_raw$Subject==59,]
i=59
filename <- sprintf('data-raw/MC_data_files/%i%s.txt', i, letterCodes[i])
t_i <- read.csv2(filename, skip=1, header=TRUE, fileEncoding='UTF-16', sep='\t', skipNul=TRUE)
t_i[sprintf('WaitClick%i.RT', 2:5)] <- NA
ti
t_i
filename
dim(MC_raw)
27693/196
27692/196
View(MC_raw)
plot(MC_raw$Subject)
t_i$Subject
plot(MC_raw$Subject[10000:15000])
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
MC_counts
MC_counts[10,,]
n_objects = 5
n_subsets = 2^n_objects-1
n_subjects_per_set = 40
n_subjects_extra
n_subjects = (n_subsets - n_objects) * n_subjects_per_set + n_subjects_extra
n_objects = 5
n_subsets = 2^n_objects-1
n_subjects_per_set = 40
n_subjects_extra = 2
n_subjects = (n_subsets - n_objects) * n_subjects_per_set + n_subjects_extra
n_subjects
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
num_range("g", 1)
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
MC_trials
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
tail(MC_trials)
array(0, dim=c(2,2), mode=integer)
array(as.integer(0), dim=c(2,2))
mode(array)
A = array(as.integer(0), dim=c(2,2))
mode(A)
str(A)
source('~/Git_repos/RanCh/data-raw/universe.R')
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
MC_trials
str(RP_table)
source('~/Git_repos/RanCh/data-raw/MC_generate_data.R')
source('~/Git_repos/RanCh/data-raw/universe.R')
MC_trials
names(PC_raw)
head(PC_raw
)
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
PC_trials
PC_trials <- PC_raw %>% as_tibble() %>%
mutate(
subj = (0:(n_lines-1)) %/% n_domains + 1,
subs_vec = pmap(.[sprintf("obj%d", 1:5)], c),
domain = as.factor(domain_names[domain]),
trial = set,
choice_int = map2_int(subs_vec, choice, function(v, i) v[i]),
choice = as.factor(object_names[choice_int]),
subs_conf = map_chr(subs_vec, function(l) paste(na.omit(object_names[l]), collapse='')),
subs_bin = map_int(subs_vec, function(l) sum(as.integer(bitShiftL(1, l-1)), na.rm=TRUE)),
subs = as.factor(subset_names[subs_bin]),
choice = as.factor(object_names[choice_int])) %>%
# Drop unused variables
select(-starts_with("obj"), -responseid, -gender, -age, -location)
PC_trials
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
PC_trials
PC_trials$ab
PC_trials[ab]
PC_trials['ab']
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
PC_trials
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
YG_raw
nrow(YG_raw)
dim(YG_raw)
dim(YG_raw)[1]
source('~/Git_repos/RanCh/data-raw/YG_generate_data.R')
YG_trials
source('~/Git_repos/RanCh/data-raw/YG_generate_data.R')
YG_trials
YG_counts
source('~/Git_repos/RanCh/data-raw/YG_generate_data.R')
YG_trials
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
PC_trials
source('~/Git_repos/RanCh/data-raw/YG_generate_data.R')
PC_trials
rep(1, 5)
c(rep(1, 5), rep(2, 5)
)
source('~/Git_repos/RanCh/data-raw/YG_generate_data.R')
56320/32
n_subjects
source('~/Git_repos/RanCh/data-raw/YG_generate_data.R')
YG_trials
View(YG_trials)
source('~/Git_repos/RanCh/data-raw/YG_generate_data.R')
source('~/Git_repos/RanCh/data-raw/YG_generate_data.R')
source('~/Git_repos/RanCh/data-raw/YG_generate_data.R')
YG_counts
YG_counts['Outcome', 1, ,]
YG_counts['Outcome', 2, ,]
chisq.test(YG_counts['Outcomes', 1, ,'abcd'], YG_counts['Outcomes', 2, , 'abcd'])
chisq.test(YG_counts['Outcomes', 1, 'abcd', ], YG_counts['Outcomes', 2, 'abcd', ])
chisq.test(YG_counts['Outcome', 1, 'abcd', ], YG_counts['Outcome', 2, 'abcd', ])
chisq.test(cbind(YG_counts['Outcome', 1, 'abcd', ], YG_counts['Outcome', 2, 'abcd', ]))
Xsq = chisq.test(cbind(YG_counts['Outcome', 1, 'abcd', ], YG_counts['Outcome', 2, 'abcd', ]))
Xsq
Xsq$observed
Xsq$expected
Xsq$residuals
Xsq$stdres
str(Xsq)
Xsq = chisq.test(cbind(YG_counts['Outcome', 1, 'abc', ], YG_counts['Outcome', 2, 'abc', ]))
A = YG_counts['Outcome', 'abc', ]
A = YG_counts['Outcome', ,'abc', ]
A
t(A)
t(omit.na(A))
t(na.omit(A))
na.omit(t(A))
chisq.test(na.omit(t(A)))
my.chisq.test = function(A)
{
x = na.omit(t(A))
if (nrow(A) > 1) {
chi2 = chisq.test(x)
chi2$p.value
} else NA
}
apply(YG_counts, c(1, 3), my.chisq.test)
apply(YG_counts, c(1, 3), nrow)
apply(YG_counts, c(1, 3), ncol)
my.chisq.test = function(A)
{
x = na.omit(t(A))
if (nrow(x) > 1) {
chi2 = chisq.test(x)
chi2$p.value
} else NA
}
apply(YG_counts, c(1, 3), my.chisq.test)
my.chisq.test = function(A)
{
x = na.omit(t(A))
if (nrow(x) > 1) {
chi2 = chisq.test(x)
chi2$p.value
} else NA
}
M = apply(YG_counts, c(1, 3), my.chisq.test)
hist(M)
my.chisq.test = function(A)
{
x = na.omit(t(A))
if (nrow(x) > 1) {
chi2 = chisq.test(x)
chi2$p.value
} else NA
}
M = apply(YG_counts, c(1, 3), my.chisq.test)
hist(M, 20)
M
Xsq
Xsq$method
PC_trials
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
PC_trials
MC_trials
YG_trials
v = c(a=1, b=2, c=4)
v
str
str(v)
unname(v)
PC_trials
PC_trials[1:4] = PC_trials[4:1]
PC_trials
PC_trials[1:4] = PC_trials[4:1]
PC_trials
PC_trials %>% select(domain, subj, block, trial)
PC_trials %>% select(domain, subj, domain, trial)
PC_trials %>% select(oneof("domain", "subj", "domain", "trial"))
PC_trials %>% select(one_of("domain", "subj", "domain", "trial"))
PC_trials %>% select(one_of("domain", "subj", "block", "trial"))
PC_trials %>% select(one_of("domain", "subj", "block", "trial", "duration"))
PC_trials %>% select(one_of("domain", "subj", match("block"), "trial", "duration"))
PC_trials %>% select(one_of("domain", "subj", matches("block"), "trial", "duration"))
PC_trials %>% select(domain, matches("block"), trial, matches("duration"))
names(PC_trials)
"ad" in names(PC_trials)
if ("ad" in names(PC_trials)) TRUE else FALSE
source('data-raw/trial.R')
source('data-raw/trial.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
PC_trial %>% compute_set_choice_vars()
PC_trials %>% compute_set_choice_vars()
PC_trials
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('data-raw/universe.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
PC_trials %>% compute_set_choice_vars()
PC_trials %>% mutate(set_vector=subs_vec) %>% compute_set_choice_vars()
PC_trials %>% mutate(set_vector=subs_vec) %>% compute_set_choice_vars() %>% select(begins_with('set'))
PC_trials %>% mutate(set_vector=subs_vec) %>% compute_set_choice_vars() %>% select(starts_with('set'))
source('data-raw/trial.R')
PC_trials %>% mutate(set_vector=subs_vec) %>% compute_set_choice_vars() %>% select(starts_with('set'))
PC_trials %>% mutate(set_vector=subs_vec) %>% compute_set_choice_vars() %>% select(starts_with('set')) %>% arrange_set_choice_vars()
PC_trials %>% mutate(set_vector=subs_vec) %>% compute_set_choice_vars()  %>% arrange_set_choice_vars()
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
PC_trials
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
source('~/Git_repos/RanCh/data-raw/popn_generate_data.R')
