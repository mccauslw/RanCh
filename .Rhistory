T_1969_counts[1,,]
source('~/Git_repos/RanCh/data-raw/T_1969_generate_data.R')
source('~/Git_repos/RanCh/data-raw/T_1969_generate_data.R')
T_1969_counts[1,,]
T_1969_counts[1,,]
source('~/Git_repos/RanCh/R/T_1969_data.R')
print(T_1969_counts[1,,])
print(T_1969_counts[1,,], na.print='-')
print(T_1969_counts[1,,], na.print='.')
N = PC_counts['Colours',,]
library(RanCh)
N = PC_counts['Colours',,]
N
prior_Alpha <- prior_DCE_scalar_alpha(2.0, ncol(N))
log_ML_DCE_Dir_mult(prior_Alpha, N_bce, log=TRUE)
log_ML_DCE_Dir_mult(prior_Alpha, N, log=TRUE)
log_ML_DCE_uniform <- function(N, log=TRUE) {
ln_ML <- 0
for (i in 1:rnow(N)) {
card = subset_card[i]
if (card > 1)
ln_ML <- ln_ML - sum(N[i, ], na.rm=TRUE) * card
}
if (log) ln_ML else exp(ln_ML)
}
log_ML_DCE_uniform(N, log=TRUE)
log_ML_DCE_uniform <- function(N, log=TRUE) {
ln_ML <- 0
for (i in 1:nrow(N)) {
card = subset_card[i]
if (card > 1)
ln_ML <- ln_ML - sum(N[i, ], na.rm=TRUE) * card
}
if (log) ln_ML else exp(ln_ML)
}
log_ML_DCE_uniform(N, log=TRUE)
source('~/Git_repos/RanCh/R/universe.R')
library(RanCh)
singleton_names
singletons
source('~/Git_repos/RanCh/R/universe.R')
source('~/Git_repos/RanCh/R/universe.R')
source('~/Git_repos/RanCh/R/HPD.R')
log_ML_DCE_Dir_mult(prior_Alpha, N)
log_ML_DCE_uniform(prior_Alpha, N)
subset_card
card = subset_card[5]
card
ln_ML <- ln_ML - sum(N[i, ], na.rm=TRUE) * log(card)
sum(N[i, ], na.rm=TRUE) * log(card)
source('~/Git_repos/RanCh/R/HPD.R')
log_ML_DCE_uniform(N)
source('~/Git_repos/RanCh/R/HPD.R')
log_ML_DCE_uniform_mult(N)
log_ML_DCE_scalar_alpha_Dir_mult(2, N)
source('~/Git_repos/RanCh/R/HPD.R')
log_ML_DCE_scalar_alpha_Dir_mult(2, N)
log_ML_DCE_scalar_alpha_Dir_mult(3, N)
log_ML_DCE_scalar_alpha_Dir_mult(4, N)
log_ML_DCE_scalar_alpha_Dir_mult(5, N)
log_ML_DCE_scalar_alpha_Dir_mult(6, N)
log_ML_DCE_scalar_alpha_Dir_mult(7, N)
source('~/Git_repos/RanCh/R/HPD.R')
prior_DCE_uniform(5)
prior_DCE_scalar_alpha(2.0, 5)
prior_DCE_vector_alpha(c(2, 1, 0.5))
u=c(2,1,0.5)
n_objects = length(u)
n_subsets = 2^n_objects-1
Alpha = matrix(0, nrow=n_subsets, ncol=n_objects)
for (i in 1:nrow(N)) {
Alpha[i, ] = u
}
Alpha * member_table[1:n_subsets, 1:n_objects]
source('~/Git_repos/RanCh/R/HPD.R')
prior_DCE_vector_alpha(c(2, 1, 0.5))
nrow(N)
source('~/Git_repos/RanCh/R/HPD.R')
prior_DCE_vector_alpha(c(2, 1, 0.5))
N
source('~/Git_repos/RanCh/R/HPD.R')
log_ML_DCE_scalar_vector_Dir_mult(c(1,2,1,2,1), N)
source('~/Git_repos/RanCh/R/HPD.R')
log_ML_DCE_vector_Dir_mult(c(1,2,1,2,1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1,2,1,2,1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1,1,1,1,1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(0.2,0.2,0.2,0.2,0.2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(0.4,0.4,0.4,0.4,0.4), N)
devtools::load_all(".")
source('~/Git_repos/RanCh/R/HPD.R')
N = PC_counts['Colours',,]
library(RanCh)
prior_DCE_vector_alpha(c(1,1,1,1,1))
prior_DCE_uniform(ncol(N))
log_ML_DCE_uniform_mult(N)
log_ML_DCE_vector_alpha_Dir_mult(c(1,1,1,1,1), N)
source('~/Git_repos/RanCh/R/HPD.R')
A_uniform_multi = prior_DCE_uniform(5)
A_vector_alpha = prior_DCE_vector_alpha(c(1,1,1,1,1))
A_uniform_multi
A_vector_alpha
log_ML_DCE_Dir_mult(A_vector_alpha)
log_ML_DCE_Dir_mult(A_vector_alpha, N)
log_ML_DCE_Dir_mult(A_uniform_multi, N)
library(RanCh)
log_ML_DCE_vectxor_alpha_Dir_mult(c(1,1,1,1,1))
log_ML_DCE_vector_alpha_Dir_mult(c(1,1,1,1,1))
log_ML_DCE_vector_alpha_Dir_mult(c(1,1,1,1,1))
log_ML_DCE_vector_alpha_Dir_mult(c(1,1,1,1,1))
log_ML_DCE_vector_alpha_Dir_mult(c(1,1,1,1,1), N)
N
log_ML_DCE_vector_alpha_Dir_mult(c(1,1,1,1,1), N)
library(RanCh)
log_ML_DCE_vector_alpha_Dir_mult(c(1,1,1,1,1), N)
source('~/Git_repos/RanCh/R/HPD.R')
log_ML_DCE_vector_alpha_Dir_mult(c(1,1,1,1,1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1,2,1,2,1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1,2,1,2,1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1,2,1,2,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1,2,1,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1,3,1,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1,2,2,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2,2,1,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(3,2,1,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2,2,1,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.1,2,1,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.9,2,1,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.5,2,1,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2,1,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.1,1,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.0,1.1,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.0,0.9,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.0,1.0,3,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.0,1.0,3.1,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.0,1.0,3.5,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.0,1.0,4,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.0,1.0,5,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.0,1.0,6,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.0,1.0,6,3), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.0,1.0,6,2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.0,1.0,6,2.5), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.8,2.0,1.0,6,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(1.9,2.0,1.0,6,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.0,1.0,6,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(3.0,2.0,1.0,6,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.0,1.0,6,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.1,1.0,6,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.2,1.0,6,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,6,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,3.0,1.0,6,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,6,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,5,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,7,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,8,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,9,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,8,2.1), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,8,2.2), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,8,2.3), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,8,2.4), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,8,2.5), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,8,2.7), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.0,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.1,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.2,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.4,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.5,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.6,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.7,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.8,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,2.9,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,3.0,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,3.1,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,3.2,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.0,3.1,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.1,3.1,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.2,3.1,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.3,3.1,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.4,3.1,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.5,3.1,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.6,3.1,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.7,3.1,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8,2.6), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8,2.7), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8,2.8), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8.1,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8.2,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8.3,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8.4,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8.5,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8.6,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8.7,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8.8,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,8.9,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,9,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,9.1,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,9.2,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,9.3,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,9.4,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,9.5,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,9.6,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.3,9.7,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.4,9.7,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.5,9.7,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.6,9.7,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.1,1.5,9.7,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.2,1.5,9.7,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.3,1.5,9.7,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.4,1.5,9.7,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.5,1.5,9.7,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.6,1.5,9.7,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.8,3.7,1.5,9.7,2.9), N)
log_ML_DCE_vector_alpha_Dir_mult(c(2.9,3.7,1.5,9.7,2.9), N)
library(RanCh)
library(RanCh)
help('regularity')
library(help='RanCh')
dim(T_1972_counts)
help('T_1972_counts')
N=T_1972_counts['Dots', 5,,]
N
P = proportions(N)
P
plot_P3(P)
triplot()
plot_P3(P)
library(klaR)
triplot()
plot_P3(P)
help(P_uniform)
sim_DCE_multinomial <- function(P, N_total) {
N = matrix(nrow=n_subsets, ncol=n_objects)
for (i in 1:nrow(P)) {
N[i, member_table[i, ]] = rmultinom(1, N_total[i], P[i, member_table[i, ]])
}
}
u = c(1, 2, 3); n_objects=3, n_subsets=2^n_objects-1;
u = c(1, 2, 3); n_objects=3; n_subsets=2^n_objects-1;
P = P_Luce(u)
P
N_total = vector(n_subsets)
N_total = vector(mode="integer", length=n_subsets)
N_total[singletons[1:3]] = 0
N_total[doubletons[1:3]] = 10
N_total[tripletons[1]] = 10
N_total
N = sim_DCE_multinomial(P, N_total)
i
nrow(P)
member_table[2,]
sim_DCE_multinomial <- function(P, N_total) {
N = matrix(nrow=n_subsets, ncol=n_objects)
for (i in 1:nrow(P)) {
N[i, member_table[i, 1:n_ojbects]] =
rmultinom(1, N_total[i], P[i, member_table[i, 1:n_objects]])
}
}
N = sim_DCE_multinomial(P, N_total)
n_objects
i = 1
P[i, member_table[i, 1:n_objects]]
P[i,]
P[i, ~is.na(member_table[i, 1:n_objects])]
sim_DCE_multinomial <- function(P, N_total) {
N = matrix(nrow=n_subsets, ncol=n_objects)
for (i in 1:nrow(P)) {
v = !is.na(member_table[i, 1:n_objects])
N[i, v] = rmultinom(1, N_total[i], P[i, v])
}
}
N = sim_DCE_multinomial(P, N_total)
N
sim_DCE_multinomial <- function(P, N_total) {
N = matrix(nrow=n_subsets, ncol=n_objects)
for (i in 1:nrow(P)) {
v = !is.na(member_table[i, 1:n_objects])
N[i, v] = rmultinom(1, N_total[i], P[i, v])
}
N
}
N = sim_DCE_multinomial(P, N_total)
N
N = sim_DCE_multinomial(P, N_total)
N
devtools::load_all(".")
devtools::load_all(".")
library(RanCh)
help("RanCh")
help("sim_DCE_multinomial")
devtools::load_all(".")
source('~/Git_repos/RanCh/R/likelihoods.R')
N = sim_DCE_multinomial(P, N_total)
source('~/Git_repos/RanCh/R/likelihoods.R')
N = sim_DCE_multinomial(P, N_total)
N
log_L_DCE_multinomial(P, N, log=TRUE)
help("sim_DCE_multinomial")
nrow(N)
Alpha
source('~/Git_repos/RanCh/R/likelihoods.R')
rDir(10, c(1,1,1))
p = rDir(10, c(1,1,1))
p
help("sim_DCE_multinomial")
source('~/Git_repos/RanCh/R/likelihoods.R')
Alpha
P <- sim_RCS_Dirichlet(10, Alpha)
P <- sim_RCS_Dirichlet(10, Alpha)
library(RanCh)
source('~/Git_repos/RanCh/R/HPD.R')
P <- sim_RCS_Dirichlet(10, Alpha)
source('~/Git_repos/RanCh/R/likelihoods.R')
P <- sim_RCS_Dirichlet(10, Alpha)
P
source('~/Git_repos/RanCh/R/likelihoods.R')
P
source('~/Git_repos/RanCh/R/likelihoods.R')
P <- sim_RCS_Dirichlet(10, Alpha)
P
P[1,,]
P[2,,]
Alpha
dimnames(Alpha) <- list(subset_names[1:7], object_names[1:3])
Alpha
P <- sim_RCS_Dirichlet(10, Alpha)
dimnames(Alpha)
list(NULL, dimnames(Alpha))
c(NULL, dimnames(Alpha))
dimnames(Alpha)
c(list(NULL), dimnames(Alpha))
source('~/Git_repos/RanCh/R/likelihoods.R')
P <- sim_RCS_Dirichlet(10, Alpha)
P[1,,
]
P[2,,]
p = rDirichlet(1, Alpha[i, v])
p = rDirichlet(1, Alpha[7, 3])
p
p = rDirichlet(1, Alpha[7, c(1,2,3)])
p
source('~/Git_repos/RanCh/R/likelihoods.R')
sim_DCE_Dir_mult(10, Alpha, N_total = )
sim_DCE_Dir_mult(10, Alpha, N_total = c(0,0,10,0,10,10,20))
source('~/Git_repos/RanCh/R/likelihoods.R')
sim_DCE_Dir_mult(10, Alpha, N_total = c(0,0,10,0,10,10,20))
source('~/Git_repos/RanCh/R/likelihoods.R')
sim_DCE_Dir_mult(10, Alpha, N_total = c(0,0,10,0,10,10,20))
source('~/Git_repos/RanCh/R/likelihoods.R')
sim_DCE_Dir_mult(10, Alpha, N_total = c(0,0,10,0,10,10,20))
N = sim_DCE_Dir_mult(10, Alpha, N_total = c(0,0,10,0,10,10,20))
N
source('~/Git_repos/RanCh/R/likelihoods.R')
N = sim_DCE_Dir_mult(10, Alpha, N_total = c(0,0,10,0,10,10,20))
N[1,,]
source('~/Git_repos/RanCh/R/likelihoods.R')
P = sim_RCS_Dirichlet(10, Alpha = )
P = sim_RCS_Dirichlet(10, Alpha)
P[1,,]
P[2,,]
source('~/Git_repos/RanCh/R/likelihoods.R')
P = sim_RCS_Dirichlet(10, Alpha)
P[2,,]
N = sim_DCE_Dir_mult(10, Alpha, c(10, 10, 10, 10, 10, 10, 20))
N[1,,]
source('~/Git_repos/RanCh/R/likelihoods.R')
n = sim_Dir_mult(10, c(2.4, 1.5, 3.2), 100)
source('~/Git_repos/RanCh/R/likelihoods.R')
n = sim_Dir_mult(10, c(2.4, 1.5, 3.2), 100)
source('~/Git_repos/RanCh/R/likelihoods.R')
n = sim_Dir_mult(10, c(2.4, 1.5, 3.2), 100)
rmultinom(1, 100, p)
p
source('~/Git_repos/RanCh/R/likelihoods.R')
rmultinom(1, 100, p)
n = sim_Dir_mult(10, c(2.4, 1.5, 3.2), 100)
rmultinom(1, n_total, p)
rmultinom(1, 100, p)
source('~/Git_repos/RanCh/R/likelihoods.R')
n = sim_Dir_mult(10, c(2.4, 1.5, 3.2), 100)
n
source('~/Git_repos/RanCh/R/likelihoods.R')
help('RanCh')
help('marginalize')
help('marginalize')
help('marginalize')
help('RanCh')
library(RanCh)
help('RanCh')
help('marginalize')
library(RanCh)
help('man/marginalize.Rd')
help('marginalize')
help("RanCh")
help("log_L_DCE_multinomial")
source('~/Git_repos/RanCh/R/RanCh.R')
help("log_L_DCE_Dir_mult")
help('Dir2_HD_regioin')
help('Dir2_HD_region')
library(RanCh)
help("RanCh")
library(RanCh)
help("RanCh")
help("sim_DCE_multinomial")
help('RCS_scalar_alpha_prior')
help('T_1972_counts')
Alpha = RCS_scalar_alpha_prior(2.0, 3)
N = T_1972_counts['Dots', 6]
N = T_1972_counts['Dots', 6,,]
log_L_DCE_Dir_mult(Alpha, N)
u <- c(2.2, 1.5, 3.3); n_objects = length(u); n_subsets=2^n_objects-1
source('~/Git_repos/RanCh/R/likelihoods.R')
Alpha <- RCS_vector_alpha_prior(5.0, u)
N_total <- vector(mode="integer", length=n_subsets)
N_total[singletons[1:3]] = 0
N_total[doubletons[1:3]] = 10
N_total[tripletons[1]] = 10
N = sim_DCE_Dir_mult(10, Alpha, N_total)
N
N(1,,)
N[1,,]
help('sim_DCE_multinomial')
source('~/Git_repos/RanCh/R/likelihoods.R')
library(RanCh)
library(RanCh)
library(RanCh)
library(RanCh)
library(help='RanCh')
source('~/Git_repos/RanCh/data-raw/MSMPB_2019_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MG_2019_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MSMPB_2019_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MSMPB_2019_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MG_2019_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MG_2019_generate_data.R')
source('~/Git_repos/RanCh/data-raw/MMS_2019_generate_data.R')
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(RanCh)
library(RanCh)
devtools::load_all(".")
library(RanCh)
library(RanCh)
source('~/Git_repos/RanCh/data-raw/MG_2019_generate_data.R')
devtools::load_all(".")
library(RanCh)
devtools::use_mit_license()
usethis::use_mit_license(name="William McCausland")
N = MMS_2019_counts['Colours',,]; n_objects =ncol(N)
P = P_uniform(3)
P
log_L_DCE_multinomial(P)
log_L_DCE_multinomial(P, N)
log_L_DCE_multinomial(P, N)
log_L_DCE_multinomial(P, N)
N = MMS_2019_counts['Colours',,]; n_objects =ncol(N)print(log_L_DCE_multinomial(P_uniform(n_objects), N))
N = MMS_2019_counts['Colours',,]; n_objects =ncol(N); print(log_L_DCE_multinomial(P_uniform(n_objects), N))
N = MMS_2019_counts['Colours',,]; n_objects =ncol(N); print(log_L_DCE_multinomial(P_uniform(n_objects), N))
log_L_DCE_multinomial(P, N)
P = P_uniform(5)
log_L_DCE_multinomial(P, N)
subset_vectors[[7]]
subset_vectors[[13]]
subset_vectors[[14]]
subset_vectors[[15]]
P
N
N[7, v[[7]]]
N[7, subset_vectors[[7]]]
dmultinom(N[7, subset_vectors[[7]]], prob=P[7, subset_vectors[[7]]], log=TRUE)
P[7, subset_vectors[[7]]]
40*log(1/3)
6*log(1/3)
7*log(1/3)
40*log(1/3)
prob = P[7, subset_vectors[[7]]]
x = N[7, subset_vectors[[7]]]
dmultinom(x, prob=prob, log=TRUE)
dmultinom(x, prob=prob)
x
sum(x)
sum(x)*log(1/3)
prob
log(.0005859602)
dmultinom(c(19,15,6), c(1/3, 1/3, 1/3))
dmultinom(c(19,15,6), prob=c(1/3, 1/3, 1/3))
dmultinom(c(19,15,6), prob=c(1/3, 1/3, 1/3), log=TRUE)
dmultinom(x=c(19,15,6), prob=c(1/3, 1/3, 1/3), log=TRUE)
dmultinom(x=c(19,15,6), size=40, prob=c(1/3, 1/3, 1/3), log=TRUE)
source('~/Git_repos/RanCh/R/likelihoods.R')
library(RanCh)
dim(P)
dim(N)
dim(P) == dim(N)
identical(dim(P), dim(N))
nrow(P) == nrow(N)
library(help='RanCh')
help(BM_terms)
help(BM_terms)
library(help='RanCh')
help(Dir2_HD_region)
Dir2_HD_region(c(4,4), 0.9)
library(Smisc)
Dir2_HD_region(c(4,4), 0.9)
library(help='RanCh')
help(P_Luce)
help(proportions)
help("regularity")
help("set_index")
help("subset_names")
help("T_1969_counts")
